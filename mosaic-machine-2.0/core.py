# Take a scanned photo (source image) to process.
# Make a grid over this photo.
# Look at every cell on the grid.
# Calculate the average color of each cell.
# Find the nearest image in the library with the same average color of the cell and substitute it in that cell.
# Repeat the process for each cell in the grid.

# import our libararies
import numpy as np
import cv2 as cv
import sys
import helper

# Get image to process
img = cv.imread('lena.png')

# Get size and dimensions of image
x = img.shape[1]
y = img.shape[0]

# how to represent a grid

# find all common divisors of the x and y to find a possible grid
factors = [np.gcd(x, y)] 
# each of these factors is a the side length of the square in the grid
# for a 10x10 image, the divisors would be 1, 2, 5 meaning the 10x10 image could be split up into a grid of 1x1 squares (pixels), 2x2 squares, and 5x5 squares (4 of them)
for i in range(factors[0]//2, 0, -1):
    if (factors[0] % i == 0):
        factors.append(i)        

# print out all the possible factors as percentages of the image size
for i in range(len(factors)):
    if (100//factors[i] == 0):
        print (i+1, ". ", "1/", factors[i], sep="")
    else:
        print (i+1, ". ", 100//factors[i], "%", sep="")

# get an input
percent = int(input("What percentage? (use the corresponding position: 1, 2..) "))
percent = factors[percent-1]

# slice image into each grid
curr_y = -percent
curr_x = -percent

# open the text file with average rgb values of each image in our library (generated by setup.py)
path_to_library = "/Users/nemo/unsplash"
values = open(path_to_library + "/values.txt", 'r')
# read line by line
lines = values.readlines()

common_rgb_values = {} # "123,45,67": "corresponding_tile.jpg"

# add the square side length to y and x respectively to get each square
for i in range(y//percent):
    curr_y += percent
    curr_x = -percent
    print (i, "/", y//percent)
    for j in range(x//percent):
        curr_x += percent
        # take our current cropped square of the grid
        crop = img[curr_y:curr_y+percent, curr_x:curr_x+percent]
        # calculate the average colour of our square in the grid
        color = helper.calculateColour(crop)
        if str(color) in common_rgb_values:
            image_path = common_rgb_values[str(color)]
        else:
            # go through each line in the text file to find the lowest color difference
            image_path = helper.searchLines(lines, color)
            common_rgb_values[str(color)] = image_path
        #  use the corresponding image (resize and place in that grid square)
        tile = cv.imread(path_to_library + "/" + image_path)
        tile = cv.resize(tile, (percent, percent))
        # crop[0:percent, 0:percent] = tile
        img[curr_y:curr_y+percent, curr_x:curr_x+percent] = tile

# close the text file
values.close()

# show the final image
cv.imshow("test", img)
cv.waitKey(0)

# go through each pixel and add to list
# dictionary holding common rgb values
# check dictionary